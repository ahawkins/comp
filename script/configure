#!/usr/bin/env bash

set -euo pipefail

bootstrap_osx() {
	# /usr/local/bin may not be on $PATH on fresh machines. This makes
	# brew (and installed brews) work throughout this script.
	export "PATH=/usr/local/bin:${PATH}"

	# Test if xcode developer tools installed
	if ! which xcodebuild > /dev/null; then
		echo 'XCode tools not installed.' 1>&2
		echo 'Confirm installation in the GUI and retry this program' 1>&2

		xcode-select --install

		exit 1
	fi

	if ! which brew > /dev/null; then
		echo "Installing homebrew"
		/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
	fi

	if ! brew list | grep ansible &> /dev/null; then
		echo "Install ansible"
		brew install ansible
	fi

	local pip="$(brew --prefix ansible)/libexec/bin/pip"
	local pips=(keyring)
	# XXX: pip list breaks (?!?) when piped to stdout but not when
	# captured in a subshell. Computers right?
	local installed_pips="$("${pip}" list)"

	for package in "${pips[@]}"; do
		if ! echo "${installed_pips}" | grep -qF "${package}"; then
			echo "Installing ${package}"
			"${pip}" install "${package}"
		fi
	done
}

main() {
	local machine

	machine="$(hostname)"

	case "${machine}" in
		*skillshare*)
			bootstrap_osx
			ansible-playbook configure-skillshare.yml --ask-become-pass "$@"
			;;
		*)
			echo "Do not know how to bootstrap ${machine}" 1>&2
			return 1
			;;
	esac
}

main "$@"
