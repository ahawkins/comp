#!/usr/bin/env bash

set -euo pipefail

source script/util.sh

bootstrap_osx() {
	if ! command -v brew &> /dev/null; then
		if [ -x /opt/homebrew/bin/brew ]; then
			eval "$(/opt/homebrew/bin/brew shellenv)"
			log::exec_command brew --version
		else
			log::error "brew not found. Install manually"
			return 1
		fi
	fi

	if ! brew list | grep ansible &> /dev/null; then
		log::indicator "Install ansible"
		log::exec_command brew install ansible
	fi

	# XXX: Use whatever the current python is. This assumes that ansible is using
	# the latest python.
	export PATH="$(brew --prefix python)/bin:${PATH}"

	log::indicator "Checking versions"

	log::exec_command ansible --version
	log::exec_command python3 --version
	log::exec_command pip3 --version

	# Install required Ansible collections
	log::indicator "Installing Ansible collections"
	log::exec_command ansible-galaxy collection install -r requirements.yml
}

main() {
	local machine

	machine="$(hostname)"

	log::header "Running on ${machine}"

	local -a ansible_args=()

	if [ -f become.yml ]; then
		log::indicator "become.yml found, assuming noninteractive execution"
		ansible_args+=(--extra-vars @become.yml)
	else
		log::warn "become.yml not found, falling back to interactive mode"
		ansible_args+=(--ask-become-pass)
	fi

	case "${machine}" in
		*[Ss]killshare*)
			bootstrap_osx
			log::exec_command ansible-playbook configure-skillshare.yml "${ansible_args[@]}" "$@"
			;;
		*[Hh]okulea*)
			bootstrap_osx
			log::exec_command ansible-playbook configure-comp.yml "${ansible_args[@]}" "$@"
			;;
		*)
			log::error "Do not know how to bootstrap ${machine}"
			return 1
			;;
	esac
}

main "$@"
