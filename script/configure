#!/usr/bin/env bash

set -euo pipefail

source script/util.sh

bootstrap_osx() {
	# /usr/local/bin may not be on $PATH on fresh machines. This makes
	# brew (and installed brews) work throughout this script.
	export "PATH=/usr/local/bin:${PATH}"

	if ! command -v brew &> /dev/null; then
		log::error "Brew not found. Install manually and retry"
		return 1
	fi

	if ! brew list | grep ansible &> /dev/null; then
		log::indicator "Install ansible"
		log::exec_command brew install ansible
	fi

	# XXX: Use whatever the current python is. This assumes that ansible is using
	# the latest python.
	export PATH="$(brew --prefix python)/bin:${PATH}"

	log::indicator "Checking versions"

	log::exec_command ansible --version
	log::exec_command python3 --version
	log::exec_command pip3 --version

	# XXX: https://bugs.python.org/issue35219
	export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES

	# Install required Ansible collections
	log::indicator "Installing Ansible collections"
	log::exec_command ansible-galaxy collection install -r requirements.yml
}

main() {
	local machine

	machine="$(hostname)"

	log::header "Running on ${machine}"

	case "${machine}" in
		*[Ss]killshare*)
			bootstrap_osx
			log::exec_command ansible-playbook configure-skillshare.yml --ask-become-pass "$@"
			;;
		*[Hh]okulea*)
			bootstrap_osx
			log::exec_command ansible-playbook configure-comp.yml --ask-become-pass "$@"
			;;
		*)
			log::error "Do not know how to bootstrap ${machine}"
			return 1
			;;
	esac
}

main "$@"
